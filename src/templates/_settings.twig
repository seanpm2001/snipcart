{# @var settings \verbb\snipcart\models\Settings #}

{% requireAdmin %}

{% set crumbs = [
    { label: "Settings"|t('app'), url: url('settings') },
    { label: "Plugins"|t('app'), url: url('settings/plugins') }
] %}

{% extends "_layouts/cp" %}
{% import "_includes/forms" as forms %}

{% set title = "Snipcart Plugin Settings"|t %}
{% set fullPageForm = true %}

{% from _self import configWarning %}

{% set tabs = {
    account:  { label: "Snipcart Account"|t, url: '#account' },
    orders: { label: "Orders"|t, url: '#orders' },
    webhooks: { label: "Webhooks"|t, url: '#webhooks' },
    logging:  { label: "Logging & Caching"|t, url: '#logging' },
    shipping: { label: "Shipping"|t, url: '#shipping' },
} %}

{% set staticConfig = craft.app.config.getConfigFromFile('snipcart') %}

{% block content %}

    {% if staticConfig is not empty %}
        <div style="color: #8f98a3; display: block; background: #F2F5F8; padding: 0.75rem 1rem; margin-bottom: 1rem;">
            {{ '<span class="warn"></span> Config values in `snipcart.php` will override any settings you change here!' | markdown }}
        </div>
    {% endif %}

    <input type="hidden" name="action" value="plugins/save-plugin-settings">
    <input type="hidden" name="pluginHandle" value="snipcart">
    {{ redirectInput('settings') }}

    <div class="form-wrap">
        <div id="account" class="">

            {% set publicKeyFieldOptions = {
                label: 'Public API Key'|t,
                class: 'code',
                id: 'publicApiKey',
                required: true,
                name: 'settings[publicApiKey]',
                value: settings.publicApiKey,
                errors: settings.getErrors('publicApiKey'),
                instructions: "Add your public Snipcart API key. You can find this on your account page in Snipcart.",
            } %}

            {% set secretKeyFieldOptions = {
                label: 'Secret API Key'|t,
                id: 'secretApiKey',
                class: 'code',
                required: true,
                name: 'settings[secretApiKey]',
                value: settings.secretApiKey,
                autocomplete: false,
                errors: settings.getErrors('secretApiKey'),
                instructions: "Add your secret Snipcart API key. You can find this on your account page in Snipcart.",
            } %}

            {% set testPublicKeyFieldOptions = {
                label: 'Test Public API Key'|t,
                class: 'code',
                id: 'publicTestApiKey',
                required: false,
                name: 'settings[publicTestApiKey]',
                value: settings.publicTestApiKey,
                errors: settings.getErrors('publicTestApiKey'),
                instructions: "Add your public Snipcart Test API key. You can find this on your account page in Snipcart.",
            } %}

            {% set testSecretKeyFieldOptions = {
                label: 'Test Secret API Key'|t,
                id: 'secretTestApiKey',
                class: 'code',
                required: false,
                name: 'settings[secretTestApiKey]',
                value: settings.secretTestApiKey,
                autocomplete: false,
                errors: settings.getErrors('secretTestApiKey'),
                instructions: "Add your secret Snipcart Test API key. You can find this on your account page in Snipcart.",
            } %}

            {% if isCraft31 %}
                {% set publicKeyFieldOptions = publicKeyFieldOptions
                    | merge({ suggestions: craft.cp.getEnvSuggestions() }) %}
                {{ forms.autosuggestField(publicKeyFieldOptions) }}

                {% set secretKeyFieldOptions = secretKeyFieldOptions
                    | merge({ suggestions: craft.cp.getEnvSuggestions() }) %}
                {{ forms.autosuggestField(secretKeyFieldOptions) }}

                <br>

                {% set testPublicKeyFieldOptions = testPublicKeyFieldOptions
                    | merge({ suggestions: craft.cp.getEnvSuggestions() }) %}
                {{ forms.autosuggestField(testPublicKeyFieldOptions) }}

                {% set testSecretKeyFieldOptions = testSecretKeyFieldOptions
                    | merge({ suggestions: craft.cp.getEnvSuggestions() }) %}
                {{ forms.autosuggestField(testSecretKeyFieldOptions) }}

                <br>

            {% else %}
                {{ forms.passwordField(publicKeyFieldOptions) }}
                {{ forms.passwordField(secretKeyFieldOptions) }}
                {{ forms.passwordField(testPublicKeyFieldOptions) }}
                {{ forms.passwordField(testSecretKeyFieldOptions) }}
            {% endif %}

            {{ forms.lightswitchField({
                label: 'Test Mode'|t,
                id: 'testMode',
                required: false,
                name: 'settings[testMode]',
                on: settings.testMode,
                errors: settings.getErrors('testMode'),
                instructions: "Switch on if you've added your test keys and want all Snipcart API interaction to be in test mode. Orders will not be sent to ShipStation."
            }) }}

            {{ forms.lightswitchField({
                label: 'Send email notifications in test mode?'|t,
                id: 'sendTestModeEmail',
                required: false,
                name: 'settings[sendTestModeEmail]',
                on: settings.sendTestModeEmail,
                errors: settings.getErrors('sendTestModeEmail'),
                instructions: "Switch on to send email notifications from Snipcart when test mode is enabled."
            }) }}

            {{ forms.selectField({
                label: 'Currency'|t,
                id: 'defaultCurrency',
                required: true,
                name: 'settings[defaultCurrency]',
                options: settings.getCurrencyOptions,
                value: settings.defaultCurrency ?? null,
                placeholder: 'id',
                errors: settings.getErrors('defaultCurrency'),
                instructions: "Specify your store's currency."
            }) }}
        </div>

        <div id="orders" class="hidden">
            {{ forms.lightswitchField({
                label: 'Reduce Item Quantities on Order?'|t,
                id: 'reduceQuantitiesOnOrder',
                required: false,
                name: 'settings[reduceQuantitiesOnOrder]',
                on: settings.reduceQuantitiesOnOrder,
                errors: settings.getErrors('reduceQuantitiesOnOrder'),
                instructions: "Switch on if you've configured webhooks and want your Product Details to adjust Quantity as orders come in."
            }) }}

            {{ forms.textField({
                label: 'Order Comments Field Name'|t,
                id: 'orderCommentsFieldName',
                class: 'code',
                required: false,
                name: 'settings[orderCommentsFieldName]',
                value: settings.orderCommentsFieldName,
                autofocus: true,
                errors: settings.getErrors('orderCommentsFieldName'),
                instructions: "If you're using [custom order fields](https://docs.snipcart.com/v2/configuration/custom-fields) for order comments, specify the exact field name here. (Used for ShipStation.)"
            }) }}

            {{ forms.textField({
                label: 'Order Gift Note Field Name'|t,
                id: 'orderGiftNoteFieldName',
                class: 'code',
                required: false,
                name: 'settings[orderGiftNoteFieldName]',
                value: settings.orderGiftNoteFieldName,
                autofocus: true,
                errors: settings.getErrors('orderGiftNoteFieldName'),
                instructions: "If you're using [custom order fields](https://docs.snipcart.com/v2/configuration/custom-fields) for a gift note, specify the exact field name here. (Used for ShipStation.)"
            }) }}

            {{ forms.lightswitchField({
                label: 'Send Order Email Notifications to Store Admins?'|t,
                id: 'sendOrderNotificationEmail',
                required: false,
                name: 'settings[sendOrderNotificationEmail]',
                on: settings.sendOrderNotificationEmail,
                errors: settings.getErrors('sendOrderNotificationEmail'),
                instructions: "Switch on if you'd like to send *store admins* custom order email notifications from Craft."
            }) }}

            {{ forms.editableTableField({
                label: 'Notification Emails'|t,
                id: 'notificationEmails',
                cols: {
                    0: { heading: 'Email Address'|t, type: 'singleline' }
                },
                required: false,
                name: 'settings[notificationEmails]',
                rows: settings.getNotificationEmailsForTable(),
                errors: settings.getErrors('notificationEmails'),
                instructions: "Add comma-separated email addresses for *store admins* that should receive email notifications as orders are placed."
            }) }}

            {% set notificationTemplateFieldOptions = {
                label: 'Order Email Notification Template'|t,
                id: 'notificationEmailTemplate',
                name: 'settings[notificationEmailTemplate]',
                class: 'code',
                value: settings.notificationEmailTemplate,
                placeholder: '_email/order-notification',
                instructions: "Specify the path to a custom Twig template to be used for admin order email notifications.",
            } %}

            {% if isCraft31 %}
                {% set notificationTemplateFieldOptions = notificationTemplateFieldOptions
                    | merge({ suggestions: craft.cp.getTemplateSuggestions() }) %}
                {{ forms.autosuggestField(notificationTemplateFieldOptions) }}
            {% else %}
                {{ forms.textField(notificationTemplateFieldOptions) }}
            {% endif %}

            {{ forms.lightswitchField({
                label: 'Send Order Email Notifications to Customers?'|t,
                id: 'sendCustomerOrderNotificationEmail',
                required: false,
                name: 'settings[sendCustomerOrderNotificationEmail]',
                on: settings.sendCustomerOrderNotificationEmail,
                errors: settings.getErrors('sendCustomerOrderNotificationEmail'),
                instructions: "Switch on if you'd like to send customers custom order email notifications from Craft. Be sure to disable Snipcart's so you don't inundate customers with multiple order confirmations!"
            }) }}

            {% set customerNotificationTemplateFieldOptions = {
                label: 'Customer Order Email Notification Template'|t,
                id: 'customerNotificationEmailTemplate',
                name: 'settings[customerNotificationEmailTemplate]',
                class: 'code',
                value: settings.customerNotificationEmailTemplate,
                placeholder: '_email/customer-order-notification',
                instructions: "Specify the path to a custom Twig template to be used for customer order email notifications.",
            } %}

            {% if isCraft31 %}
                {% set customerNotificationTemplateFieldOptions = customerNotificationTemplateFieldOptions
                    | merge({ suggestions: craft.cp.getTemplateSuggestions() }) %}
                {{ forms.autosuggestField(customerNotificationTemplateFieldOptions) }}
            {% else %}
                {{ forms.textField(customerNotificationTemplateFieldOptions) }}
            {% endif %}
        </div>

        <div id="webhooks" class="hidden">
            {{ forms.textField({
                label: 'Webhook Endpoint'|t,
                id: 'webhookEndpoint',
                name: 'webhookEndpoint',
                class: 'code webhook-endpoint',
                value: siteUrl(craft.app.config.general.actionTrigger ~ '/snipcart/webhooks/handle'),
                readonly: true,
                instructions: "Configure Snipcart to use this endpoint if you'd like this site to receive webhook data."
            }) }}
        </div>

        <div id="logging" class="hidden">
            {{ forms.lightswitchField({
                label: 'Cache API Responses?'|t,
                id: 'cacheResponses',
                required: false,
                name: 'settings[cacheResponses]',
                on: settings.cacheResponses,
                errors: settings.getErrors('cacheResponses'),
                instructions: "Switch on to have some REST API requests cached, which will make things zippier in the control panel."
            }) }}

            {{ forms.textField({
                label: 'Cache Duration Limit'|t,
                id: 'cacheDurationLimit',
                name: 'settings[cacheDurationLimit]',
                class: 'code',
                value: settings.cacheDurationLimit,
                instructions: "Specify the maximum number of seconds cached responses will be used, if enabled."
            }) }}

            {{ forms.lightswitchField({
                label: 'Log Custom Rates?'|t,
                id: 'logCustomRates',
                required: false,
                name: 'settings[logCustomRates]',
                on: settings.logCustomRates,
                errors: settings.getErrors('logCustomRates'),
                instructions: "Switch on to log webhook rate responses to the database for troubleshooting and order shipping rate validation."
            }) }}

            {{ forms.lightswitchField({
                label: 'Log Webhook Requests?'|t,
                id: 'logWebhookRequests',
                required: false,
                name: 'settings[logWebhookRequests]',
                on: settings.logWebhookRequests,
                errors: settings.getErrors('logWebhookRequests'),
                instructions: "Switch on to look valid webhook posts to the database for troubleshooting."
            }) }}
        </div>

        <div id="shipping" class="hidden">

            <h2>{{ "Providers"|t }}</h2>

            {% set hasConfiguredProviders = false %}
            {% set hasProviderErrors = false %}

            {% if settings.getErrors('providerSettings') %}
                <ul class="errors mb-4">
                    {% for field, message in settings.getErrors('providerSettings') %}
                        <li>{{ message }}</li>
                    {% endfor %}
                </ul>
            {% endif %}

            <div id="shipping-provider-fields" class="matrix matrix-field">
                {% if settings.getProviders() | length %}
                    <div class="blocks">
                        {% for providerName, provider in settings.getProviders() %}
                            {% if providerName == 'shipStation' %}
                                {% set providerSettings = provider.getSettings() %}
                                {% set hasErrors = providerSettings.getErrors() | length %}
                                {% set isConfigured = provider.isConfigured %}
                                {% set displayPanel = isConfigured or (not isConfigured and hasErrors) %}

                                {% if isConfigured %}
                                    {% set hasConfiguredProviders = true %}
                                {% endif %}

                                {% if hasErrors %}
                                    {% set hasProviderErrors = true %}
                                {% endif %}

                                {% set logoUrl = craft.app.assetManager.getPublishedUrl(
                                    '@verbb/snipcart/assetbundles/dist/img/shipstation.svg',
                                    true
                                ) %}
                                <a id="shipstation-add-btn" class="btn{% if displayPanel %} hidden{% endif %}">+ {{ "ShipStation"|t }}</a>
                                <div id="shipstation-provider-settings" class="snipcart-provider shipStation matrixblock relative{% if not displayPanel %} hidden{% endif %}">
                                    <a id="shipstation-settings-delete" class="delete icon" title="Delete Provider" style="position: absolute; top: 1rem; right: 1.25rem;"></a>
                                    <input id="shipstation-panel-enabled" type="hidden" name="providers[shipStation][enabled]" value="{{ displayPanel ? "1" : "0" }}">
                                    <img
                                        src="{{ logoUrl }}" 
                                        class="mt-6"
                                        alt="ShipStation logo" 
                                        width="130"
                                        title="ShipStation"
                                    >

                                    {% set apiKeyFieldOptions = {
                                        label: 'API Key'|t,
                                        id: 'apiKey',
                                        class: 'code',
                                        required: true,
                                        name: 'settings[providerSettings][shipStation][apiKey]',
                                        value: providerSettings.apiKey,
                                        autocomplete: false,
                                        errors: providerSettings.getErrors('apiKey'),
                                        instructions: "_Account_ → _API Settings_ → _API Keys_",
                                    } %}

                                    {% set apiSecretFieldOptions = {
                                        label: 'API Secret'|t,
                                        id: 'apiSecret',
                                        class: 'code',
                                        required: true,
                                        name: 'settings[providerSettings][shipStation][apiSecret]',
                                        value: providerSettings.apiSecret,
                                        autocomplete: false,
                                        errors: providerSettings.getErrors('apiSecret'),
                                        instructions: "_Account_ → _API Settings_ → _API Keys_",
                                    } %}

                                    {% if isCraft31 %}
                                        {% set apiKeyFieldOptions = apiKeyFieldOptions
                                            | merge({ suggestions: craft.cp.getEnvSuggestions() }) %}
                                        {{ forms.autosuggestField(apiKeyFieldOptions) }}

                                        {% set apiSecretFieldOptions = apiSecretFieldOptions
                                            | merge({ suggestions: craft.cp.getEnvSuggestions() }) %}
                                        {{ forms.autosuggestField(apiSecretFieldOptions) }}
                                    {% else %}
                                        {{ forms.passwordField(apiKeyFieldOptions) }}
                                        {{ forms.passwordField(apiSecretFieldOptions) }}
                                    {% endif %}

                                    {{ forms.textField({
                                        label: 'Default Carrier Code'|t,
                                        id: 'defaultCarrierCode',
                                        class: 'code',
                                        required: false,
                                        name: 'settings[providerSettings][shipStation][defaultCarrierCode]',
                                        value: providerSettings.defaultCarrierCode,
                                        autocomplete: false,
                                        errors: providerSettings.getErrors('defaultCarrierCode'),
                                        instructions: ""
                                    }) }}

                                    {{ forms.textField({
                                        label: 'Default Package Code'|t,
                                        id: 'defaultPackageCode',
                                        class: 'code',
                                        required: false,
                                        name: 'settings[providerSettings][shipStation][defaultPackageCode]',
                                        value: providerSettings.defaultPackageCode,
                                        autocomplete: false,
                                        errors: providerSettings.getErrors('defaultPackageCode'),
                                        instructions: ""
                                    }) }}

                                    {{ forms.textField({
                                        label: 'Default Country'|t,
                                        id: 'defaultCountry',
                                        class: 'code',
                                        required: true,
                                        name: 'settings[providerSettings][shipStation][defaultCountry]',
                                        value: providerSettings.defaultCountry,
                                        size: 3,
                                        limit: 2,
                                        autocomplete: false,
                                        errors: providerSettings.getErrors('defaultCountry'),
                                        instructions: "Two-character country code."
                                    }) }}

                                    {{ forms.selectField({
                                        label: 'Default Order Confirmation'|t,
                                        id: 'defaultOrderConfirmation',
                                        required: true,
                                        name: 'settings[providerSettings][shipStation][defaultOrderConfirmation]',
                                        value: providerSettings.defaultOrderConfirmation,
                                        options: {
                                            'none': 'None',
                                            'delivery': 'Delivery',
                                            'signature': 'Signature',
                                            'adult_signature': 'Adult Signature',
                                            'direct_signature': 'Direct Signature',
                                        },
                                        errors: providerSettings.getErrors('defaultOrderConfirmation'),
                                        instructions: "Type of delivery confirmation to be used once the shipment is created."
                                    }) }}

                                    {{ forms.textField({
                                        label: 'Default Warehouse ID'|t,
                                        id: 'defaultWarehouseId',
                                        class: 'code',
                                        required: true,
                                        name: 'settings[providerSettings][shipStation][defaultWarehouseId]',
                                        value: providerSettings.defaultWarehouseId,
                                        autocomplete: false,
                                        errors: providerSettings.getErrors('defaultWarehouseId'),
                                        instructions: ""
                                    }) }}

                                    {{ forms.lightswitchField({
                                        label: 'Enable Shipping Rates?'|t,
                                        id: 'enableShippingRates',
                                        required: false,
                                        name: 'settings[providerSettings][shipStation][enableShippingRates]',
                                        on: providerSettings.enableShippingRates,
                                        errors: providerSettings.getErrors('enableShippingRates'),
                                        instructions: "Fetch custom shipping rates from the ShipStation API?"
                                    }) }}

                                    {{ forms.lightswitchField({
                                        label: 'Send Completed Orders?'|t,
                                        id: 'sendCompletedOrders',
                                        required: false,
                                        name: 'settings[providerSettings][shipStation][sendCompletedOrders]',
                                        on: providerSettings.sendCompletedOrders,
                                        errors: providerSettings.getErrors('sendCompletedOrders'),
                                        instructions: "Send completed Snipcart orders to ShipStation?"
                                    }) }}
                                </div>
                            {% endif %}
                        {% endfor %}
                    </div>
                {% endif %}
            </div>

            {% set hasShipFromErrors = (settings.getErrors('shipFrom') | length > 0) or hasProviderErrors %}

            <div id="ship-from-fields" class="mt-12{% if not hasConfiguredProviders and not hasShipFromErrors %} hidden{% endif %}">
                <h2>{{ "Ship From"|t }}</h2>

                {% if settings.getErrors('shipFrom') %}
                    <ul class="errors mb-4">
                        {% for field, message in settings.getErrors('shipFrom') %}
                            <li>{{ message }}</li>
                        {% endfor %}
                    </ul>
                {% endif %}

                {% set shipFrom = settings.shipFrom %}

                {{ forms.textField({
                    label: 'Name'|t,
                    id: 'shipFromName',
                    name: 'settings[shipFromAddress][name]',
                    required: true,
                    value: shipFrom.name ?? '',
                    errors: shipFrom.getErrors('name') ?? [],
                    instructions: ""
                }) }}

                {{ forms.textField({
                    label: 'Company Name'|t,
                    id: 'shipFromCompanyName',
                    name: 'settings[shipFromAddress][companyName]',
                    value: shipFrom.companyName ?? '',
                    errors: shipFrom.getErrors('companyName') ?? [],
                    instructions: ""
                }) }}

                {{ forms.textField({
                    label: 'Address'|t,
                    id: 'shipFromAddress1',
                    name: 'settings[shipFromAddress][address1]',
                    required: true,
                    placeholder: 'Address Line 1'|t,
                    value: shipFrom.address1 ?? '',
                    errors: shipFrom.getErrors('address1') ?? [],
                    instructions: ""
                }) }}

                {{ forms.textField({
                    id: 'shipFromAddress2',
                    name: 'settings[shipFromAddress][address2]',
                    placeholder: 'Address Line 2'|t,
                    value: shipFrom.address2 ?? '',
                    errors: shipFrom.getErrors('address2') ?? [],
                    instructions: ""
                }) }}

                <div class="input-row">
                    <div class="column city">
                        {{ forms.textField({
                            id: 'shipFromCity',
                            name: 'settings[shipFromAddress][city]',
                            required: true,
                            size: 30,
                            placeholder: 'City',
                            value: shipFrom.city ?? '',
                            errors: shipFrom.getErrors('city') ?? [],
                            instructions: ""
                        }) }}
                    </div>
                    <div class="column province">
                        {{ forms.textField({
                            id: 'shipFromProvince',
                            name: 'settings[shipFromAddress][province]',
                            required: true,
                            placeholder: 'Province'|t,
                            size: 8,
                            maxlength: 2,
                            value: shipFrom.province ?? '',
                            errors: shipFrom.getErrors('province') ?? [],
                            instructions: ""
                        }) }}
                    </div>
                    <div class="column postal-code">
                        {{ forms.textField({
                            id: 'shipFromPostalCode',
                            name: 'settings[shipFromAddress][postalCode]',
                            required: true,
                            placeholder: 'Postal Code'|t,
                            value: shipFrom.postalCode ?? '',
                            errors: shipFrom.getErrors('postalCode') ?? [],
                            instructions: ""
                        }) }}
                    </div>
                    <div class="column country">
                        {{ forms.textField({
                            id: 'shipFromCountry',
                            name: 'settings[shipFromAddress][country]',
                            required: true,
                            placeholder: 'Country'|t,
                            size: 8,
                            maxlength: 2,
                            value: shipFrom.country ?? '',
                            errors: shipFrom.getErrors('country') ?? [],
                            instructions: ""
                        }) }}
                    </div>
                </div>

                {{ forms.textField({
                    label: 'Phone'|t,
                    id: 'shipFromPhone',
                    name: 'settings[shipFromAddress][phone]',
                    required: true,
                    value: shipFrom.phone ?? '',
                    errors: shipFrom.getErrors('phone') ?? [],
                    instructions: ""
                }) }}

                {{ forms.textField({
                    label: 'Email'|t,
                    id: 'shipFromEmail',
                    name: 'settings[shipFromAddress][email]',
                    required: true,
                    value: shipFrom.email ?? '',
                    errors: shipFrom.getErrors('email') ?? [],
                    instructions: ""
                }) }}
            </div>
        </div>
    </div>

{% endblock %}
